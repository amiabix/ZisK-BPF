#!/usr/bin/env python3
"""
Memory Operations Test Program - Week 4 Implementation
Tests all 8 new memory opcodes: LDXW, LDXH, LDXB, LDXDW, STW, STH, STB, STDW
"""

import struct

def create_memory_test_programs():
    """Create comprehensive test programs for all memory operations"""
    
    programs = []
    
    # Test 1: Basic memory operations
    program1 = bytearray()
    # MOV r1, 0x1000 (base address)
    program1.extend([0xB7, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00])
    # MOV r2, 0x12345678 (32-bit value)
    program1.extend([0xB7, 0x02, 0x00, 0x00, 0x78, 0x56, 0x34, 0x12])
    # STW [r1], r2 (store word)
    program1.extend([0x63, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    # MOV r3, 0x1000 (load address)
    program1.extend([0xB7, 0x03, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00])
    # LDXW r4, [r3] (load word)
    program1.extend([0x61, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    # EXIT
    program1.extend([0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    programs.append(("Basic Memory Test", program1))
    
    # Test 2: Byte and halfword operations
    program2 = bytearray()
    # MOV r1, 0x2000 (base address)
    program2.extend([0xB7, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00])
    # MOV r2, 0xABCD (16-bit value)
    program2.extend([0xB7, 0x02, 0x00, 0x00, 0xCD, 0xAB, 0x00, 0x00])
    # STH [r1], r2 (store halfword)
    program2.extend([0x6B, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    # MOV r3, 0x42 (8-bit value)
    program2.extend([0xB7, 0x03, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00])
    # STB [r1+2], r3 (store byte at offset)
    program2.extend([0x73, 0x13, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00])
    # LDXH r4, [r1] (load halfword)
    program2.extend([0x69, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    # LDXB r5, [r1+2] (load byte at offset)
    program2.extend([0x71, 0x51, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00])
    # EXIT
    program2.extend([0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    programs.append(("Byte/Halfword Test", program2))
    
    # Test 3: Doubleword operations
    program3 = bytearray()
    # MOV r1, 0x3000 (base address)
    program3.extend([0xB7, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00])
    # MOV r2, 0x123456789ABCDEF0 (64-bit value)
    program3.extend([0xB7, 0x02, 0x00, 0x00, 0xF0, 0xDE, 0xBC, 0x9A])
    # MOV r3, 0x78563412 (high 32 bits)
    program3.extend([0xB7, 0x03, 0x00, 0x00, 0x12, 0x34, 0x56, 0x78])
    # STDW [r1], r2 (store doubleword)
    program3.extend([0x7B, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    # LDXDW r4, [r1] (load doubleword)
    program3.extend([0x79, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    # EXIT
    program3.extend([0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    programs.append(("Doubleword Test", program3))
    
    # Test 4: Memory copy operation
    program4 = bytearray()
    # MOV r1, 0x4000 (source address)
    program4.extend([0xB7, 0x01, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00])
    # MOV r2, 0x5000 (destination address)
    program4.extend([0xB7, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00])
    # MOV r3, 0x12345678 (data to copy)
    program4.extend([0xB7, 0x03, 0x00, 0x00, 0x78, 0x56, 0x34, 0x12])
    # STW [r1], r3 (store at source)
    program4.extend([0x63, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    # LDXW r4, [r1] (load from source)
    program4.extend([0x61, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    # STW [r2], r4 (store at destination)
    program4.extend([0x63, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    # LDXW r5, [r2] (verify copy)
    program4.extend([0x61, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    # EXIT
    program4.extend([0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    programs.append(("Memory Copy Test", program4))
    
    # Test 5: Complex memory chain
    program5 = bytearray()
    # MOV r1, 0x6000 (base address)
    program5.extend([0xB7, 0x01, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00])
    # MOV r2, 0xAA (byte value)
    program5.extend([0xB7, 0x02, 0x00, 0x00, 0xAA, 0x00, 0x00, 0x00])
    # STB [r1], r2 (store byte)
    program5.extend([0x73, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    # MOV r3, 0xBBBB (halfword value)
    program5.extend([0xB7, 0x03, 0x00, 0x00, 0xBB, 0xBB, 0x00, 0x00])
    # STH [r1+1], r3 (store halfword at offset)
    program5.extend([0x6B, 0x13, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00])
    # MOV r4, 0xCCCCCCCC (word value)
    program5.extend([0xB7, 0x04, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC])
    # STW [r1+3], r4 (store word at offset)
    program5.extend([0x63, 0x14, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00])
    # LDXB r5, [r1] (load byte)
    program5.extend([0x71, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    # LDXH r6, [r1+1] (load halfword)
    program5.extend([0x69, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00])
    # LDXW r7, [r1+3] (load word)
    program5.extend([0x61, 0x71, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00])
    # EXIT
    program5.extend([0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    programs.append(("Complex Memory Chain Test", program5))
    
    return programs

def write_test_programs(programs):
    """Write all test programs to files"""
    for i, (name, program) in enumerate(programs):
        filename = f"memory_test_{i+1}.bin"
        with open(filename, 'wb') as f:
            f.write(program)
        print(f"âœ… Created {filename}: {name} ({len(program)} bytes)")
        print(f"   Program: {program.hex()}")
        print()

def main():
    print("ðŸš€ WEEK 4: COMPLETE MEMORY OPERATIONS IMPLEMENTATION")
    print("=" * 60)
    print("Testing 8 new memory opcodes:")
    print("  â€¢ 0x61 - LDXW (Load word from memory)")
    print("  â€¢ 0x69 - LDXH (Load halfword from memory)")
    print("  â€¢ 0x71 - LDXB (Load byte from memory)")
    print("  â€¢ 0x79 - LDXDW (Load doubleword from memory)")
    print("  â€¢ 0x63 - STW (Store word to memory)")
    print("  â€¢ 0x6B - STH (Store halfword to memory)")
    print("  â€¢ 0x73 - STB (Store byte to memory)")
    print("  â€¢ 0x7B - STDW (Store doubleword to memory)")
    print()
    
    # Create test programs
    programs = create_memory_test_programs()
    
    # Write to files
    write_test_programs(programs)
    
    print("ðŸ“Š WEEK 4 RESULTS:")
    print(f"   Previous opcodes: 21")
    print(f"   New opcodes: +8")
    print(f"   Total opcodes: 29")
    print(f"   Coverage: 45.3% (29/64)")
    print()
    
    print("ðŸŽ¯ READY FOR TESTING!")
    print("   Run: cargo-zisk build --release")
    print("   Then: cargo-zisk run --release")
    print("   Input: Use any of the memory_test_*.bin files")
    print()
    
    print("ðŸš€ NEXT: WEEK 5 - ESSENTIAL SYSCALLS")
    print("   Target: 29 â†’ 34 opcodes (53.1% coverage)")

if __name__ == "__main__":
    main()
